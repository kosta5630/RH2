-- GUI Setup (Aesthetic + Moveable)
local Gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
Gui.Name = "AutoGuardGUI"
Gui.ResetOnSpawn = false

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 160, 0, 50)
ToggleButton.Position = UDim2.new(0, 20, 0, 20)
ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextScaled = true
ToggleButton.Text = "AutoGuard: OFF"
ToggleButton.Parent = Gui

-- Aesthetic additions
local corner = Instance.new("UICorner", ToggleButton)
corner.CornerRadius = UDim.new(0, 12)

local shadow = Instance.new("UIStroke", ToggleButton)
shadow.Color = Color3.fromRGB(0, 0, 0)
shadow.Thickness = 1.5
shadow.Transparency = 0.5

-- Toggle logic with animation
ToggleButton.MouseButton1Click:Connect(function()
	AutoGuardOn = not AutoGuardOn
	ToggleButton.Text = "AutoGuard: " .. (AutoGuardOn and "ON" or "OFF")

	local newColor = AutoGuardOn and Color3.fromRGB(60, 170, 80) or Color3.fromRGB(170, 60, 60)

	TweenService:Create(
		ToggleButton,
		TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{BackgroundColor3 = newColor}
	):Play()

	if not AutoGuardOn then
		CurrentTarget = nil
	end
end)

-- Make Button Moveable
local dragging = false
local dragInput, dragStart, startPos

ToggleButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = ToggleButton.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

ToggleButton.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		ToggleButton.Position = UDim2.new(
			startPos.X.Scale,
			startPos.X.Offset + delta.X,
			startPos.Y.Scale,
			startPos.Y.Offset + delta.Y
		)
	end
end)
