local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

local Values = Player:WaitForChild("Backpack"):WaitForChild("PlayerValues")
local PlayerEvents = game:GetService("ReplicatedStorage"):WaitForChild("PlayerEvents")

local QuickDrawList = {
    "Bronze",
    "Silver",
    "Gold",
    "HoF"
}

local QuickDrawTimings = {
    ["Bronze"] = 0.042,
    ["Silver"] = 0.071,
    ["Gold"] = 0.09,
    ["HoF"] = 0.1095,
}

local ShotTypes = {
    ["Standing Shot"] = 0.5812,
    ["Moving Shot"] = 0.6734424,
    ["Close Floater"] = 0.3575,
    ["Floater"] = 0.3702,
    ["Layup"] = 0.4603,
    ["Standing Layup"] = 0.459,
    ["Reverse Layup"] = 0.6287178,
    ["Moving Dunk"] = 0.511,
    ["Standing Dunk"] = 0.467,
    ["Close Post Fade"] = 0.93,
    ["Post Fade"] = 0.571,
}


local QuickDrawTier
task.delay(0.1, function()
    for _, v in next, getgc(true) do
        if type(v) == "table" then
            for i2, v2 in pairs(v) do
                if i2 == "Badges" or v2 == "Badges" then
                    if type(v2) == "table" then
                        for i3, v3 in pairs(v2) do
                            if i3 == "QuickDraw" and table.find(QuickDrawList, v3) then
                                QuickDrawTier = v3
                            end
                        end
                    end
                end
            end
        end
    end
end)


function AdjustOnPing(Timing, ShotType)
    if Timing then
        local AdjustedTiming = math.max(Timing - (game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue() / 1000), 0)
        if QuickDrawTier ~= "Locked" and ShotType == "Standing Shot" and QuickDrawTier ~= 0 and QuickDrawTier then
            AdjustedTiming -= QuickDrawTimings[QuickDrawTier]
        end
        return AdjustedTiming
    end
end


local DunkType
local ShotType
local name
name = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }
    if method == "FireServer" and self.Name == "Shooting" then
        ShotType = args[3]
        if type(args[3]) ~= "string" then
            DunkType = args[2]
        end
        return name(self, unpack(args))
    end
    return name(self, ...)
end))


Values.HandValue.Changed:Connect(function()
    if Values.HandValue.Value == "Shooting" then
        local Timing = AdjustOnPing(ShotTypes[ShotType], ShotType)
        if Timing then
            task.wait(Timing)
            PlayerEvents.Shooting:FireServer(false, "Shooting", ShotType)
        end
    elseif Values.HandValue.Value == "Dunking" then
        local Timing = AdjustOnPing(ShotTypes[DunkType], DunkType)
        if Timing then
            task.wait(Timing)
            PlayerEvents.Shooting:FireServer(false, DunkType, 1)
        end
    end
end)
